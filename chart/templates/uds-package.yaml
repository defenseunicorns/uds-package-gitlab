apiVersion: uds.dev/v1alpha1
kind: Package
metadata:
  name: gitlab
  namespace: {{ .Release.Namespace }}
spec:
  {{- if and (.Values.sso.enabled) (eq .Values.sso.protocol "openid_connect") }}
  sso:
    - name: GitLab Login
      clientId: uds-swf-gitlab
      redirectUris:
        - "https://gitlab.{{ .Values.domain }}/users/auth/openid_connect/callback"

      secretName: {{ .Values.sso.secretName }}
      secretTemplate:
        # GitLab expects a providers JSON file that is documented more here: https://gitlab-org.gitlab.io/technical-writing-group/gitlab-docs-hugo/administration/auth/oidc/
        # Note: the `authorization_endpoint`, `issuer`, and `userinfo_endpoint` must be the external URL
        providers: |
          {
            "name": "openid_connect",
            "label": "SSO",
            "args": {
              "name": "openid_connect",
              "scope": [
                "openid",
                "profile"
              ],
              "response_type": "code",
              "issuer": "https://sso.{{ .Values.domain }}/realms/uds",
              "client_auth_method": "query",
              "discovery": false,
              "uid_field": "preferred_username",
              "pkce": "true",
              "client_options": {
                "identifier": "clientField(clientId)",
                "secret": "clientField(secret)",
                "redirect_uri": "clientField(redirectUris)[0]",
                "end_session_endpoint": "http://keycloak-http.keycloak.svc.cluster.local:8080/realms/uds/protocol/openid-connect/logout",
                "authorization_endpoint": "https://sso.{{ .Values.domain }}/realms/uds/protocol/openid-connect/auth",
                "token_endpoint": "http://keycloak-http.keycloak.svc.cluster.local:8080/realms/uds/protocol/openid-connect/token",
                "userinfo_endpoint": "https://sso.{{ .Values.domain }}/realms/uds/protocol/openid-connect/userinfo",
                "jwks_uri": "http://keycloak-http.keycloak.svc.cluster.local:8080/realms/uds/protocol/openid-connect/certs"
              }
            }
          }
  {{- else if and (.Values.sso.enabled) (eq .Values.sso.protocol "saml") }}
  sso:
    - name: GitLab Login
      clientId: uds-swf-gitlab-saml
      redirectUris:
        - "https://gitlab.{{ .Values.domain }}/users/auth/saml/callback"

      protocol: saml
      defaultClientScopes:
        - "mapper-saml-email-email"
        - "mapper-saml-firstname-first_name"
        - "mapper-saml-lastname-last_name"
        - "mapper-saml-grouplist-groups"

      attributes:
        saml.client.signature: "false"

      secretName: {{ .Values.sso.secretName }}
      secretTemplate:
        # GitLab expects a providers JSON file that is documented more here: https://docs.gitlab.com/ee/integration/saml.html
        providers: |
          {
            "name":"saml",
            "label":"SSO",
            "groups_attribute": "Groups",
            "required_groups": {{ .Values.sso.requiredGroups | toJson }},
            "admin_groups": {{ .Values.sso.adminGroups | toJson }},
            "args":{
                "assertion_consumer_service_url": "https://gitlab.{{ .Values.domain }}/users/auth/saml/callback",
                "idp_cert": "clientField(samlIdpCertificate)",
                "idp_sso_target_url": "https://sso.{{ .Values.domain }}/realms/uds/protocol/saml",
                "issuer": "clientField(clientId)",
                "name_identifier_format": "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
            }
          }
  {{- end }}
  network:
    expose:
      - service: gitlab-webservice-default
        selector:
          app: webservice
        host: gitlab
        gateway: tenant
        port: 8181
      - service: gitlab-gitlab-pages
        selector:
          app: gitlab-pages
        host: "*.pages"
        gateway: tenant
        port: 8090
      - service: gitlab-registry
        selector:
          app: registry
        host: registry
        gateway: tenant
        port: 5000
    allow:
      - direction: Ingress
        remoteGenerated: IntraNamespace

    # ingress from runner only if runner lives in cluster. Otherwise, it goes through the gateway
    {{- if .Values.runner.internal }}
      - direction: Ingress
        selector:
          app: webservice
        remoteNamespace: {{ .Values.runner.namespace | quote }}
        remoteSelector:
          {{ .Values.runner.selector | toYaml | nindent 10 }}
        port: 8181
        description: "Runner Ingress Workhorse"
    {{- end }}

    {{- if and .Values.runner.internal (hasKey .Values.runner "sandboxNamespace") (ne .Values.runner.sandboxNamespace "") }}
      - direction: Ingress
        selector:
          app: webservice
        remoteNamespace: {{ .Values.runner.sandboxNamespace | quote }}
        port: 8181
        description: "Runner Sandbox Ingress Workhorse"
    {{- end }}

      - direction: Ingress
        remoteNamespace: monitoring
        remoteSelector:
          app: prometheus
        selector:
          app: gitlab-exporter
        port: 9168
        description: "Monitoring Exporter"

      - direction: Ingress
        remoteNamespace: monitoring
        remoteSelector:
          app: prometheus
        selector:
          app: gitaly
        port: 9236
        description: "Gitaly Service Monitor"

      - direction: Ingress
        remoteNamespace: monitoring
        remoteSelector:
          app: prometheus
        selector:
          app: gitlab-shell
        port: 9122
        description: "Gitlab Shell Service Monitor"

      - direction: Ingress
        remoteNamespace: monitoring
        remoteSelector:
          app: prometheus
        selector:
          app: registry
        port: 5001
        description: "Registry Service Monitor"

      - direction: Ingress
        remoteNamespace: monitoring
        remoteSelector:
          app: prometheus
        selector:
          app: webservice
        port: 8083
        description: "Webservice Service Monitor"

      - direction: Ingress
        remoteNamespace: monitoring
        remoteSelector:
          app: prometheus
        selector:
          app: webservice
        port: 9229
        description: "Workhorse Service Monitor"

      - direction: Ingress
        remoteNamespace: monitoring
        remoteSelector:
          app: prometheus
        selector:
          app: gitlab-pages
        port: 9235
        description: "Pages Service Monitor"

      - direction: Egress
        selector:
          app: registry
        {{- if .Values.storage.internal }}
        remoteNamespace: {{ .Values.storage.namespace | quote }}
        remoteSelector:
          {{ .Values.storage.selector | toYaml | nindent 10 }}
        port: {{ .Values.storage.port }}
        {{- else }}
        remoteGenerated: Anywhere
        {{- end }}
        description: "Registry Storage"

      # Sidekiq Netpols
      - direction: Egress
        selector:
          app: sidekiq
        {{- if .Values.storage.internal }}
        remoteNamespace: {{ .Values.storage.namespace | quote }}
        remoteSelector:
          {{ .Values.storage.selector | toYaml | nindent 10 }}
        port: {{ .Values.storage.port }}
        {{- else }}
        remoteGenerated: Anywhere
        {{- end }}
        description: "Sidekiq Storage"

      - direction: Egress
        selector:
          app: sidekiq
        {{- if .Values.redis.internal }}
        remoteNamespace: {{ .Values.redis.namespace | quote }}
        remoteSelector:
          {{ .Values.redis.selector | toYaml | nindent 10 }}
        port: {{ .Values.redis.port }}
        {{- else }}
        remoteGenerated: Anywhere
        {{- end }}
        description: "Sidekiq Redis"

      - direction: Egress
        selector:
          app: sidekiq
        {{- if .Values.postgres.internal }}
        remoteNamespace: {{ .Values.postgres.namespace | quote }}
        remoteSelector:
          {{ .Values.postgres.selector | toYaml | nindent 10 }}
        port: {{ .Values.postgres.port }}
        {{- else }}
        remoteGenerated: Anywhere
        {{- end }}
        description: "Sidekiq Postgres"

      - direction: Egress
        selector:
          app: gitlab-exporter
        {{- if .Values.redis.internal }}
        remoteNamespace: {{ .Values.redis.namespace | quote }}
        remoteSelector:
          {{ .Values.redis.selector | toYaml | nindent 10 }}
        port: {{ .Values.redis.port }}
        {{- else }}
        remoteGenerated: Anywhere
        {{- end }}
        description: "Exporter Redis"

      - direction: Egress
        selector:
          app: gitlab-exporter
        {{- if .Values.postgres.internal }}
        remoteNamespace: {{ .Values.postgres.namespace | quote }}
        remoteSelector:
          {{ .Values.postgres.selector | toYaml | nindent 10 }}
        port: {{ .Values.postgres.port }}
        {{- else }}
        remoteGenerated: Anywhere
        {{- end }}
        description: "Exporter Postgres"

      # Migrations Netpols
      - direction: Egress
        selector:
          app: migrations
        {{- if .Values.postgres.internal }}
        remoteNamespace: {{ .Values.postgres.namespace | quote }}
        remoteSelector:
          {{ .Values.postgres.selector | toYaml | nindent 10 }}
        port: {{ .Values.postgres.port }}
        {{- else }}
        remoteGenerated: Anywhere
        {{- end }}
        description: "Migrations Postgres"

      - direction: Egress
        selector:
          app: migrations
        {{- if .Values.redis.internal }}
        remoteNamespace: {{ .Values.redis.namespace | quote }}
        remoteSelector:
          {{ .Values.redis.selector | toYaml | nindent 10 }}
        port: {{ .Values.redis.port }}
        {{- else }}
        remoteGenerated: Anywhere
        {{- end }}
        description: "Migrations Redis"

      # Toolbox Netpols
      - direction: Egress
        selector:
          app: toolbox
        {{- if .Values.storage.internal }}
        remoteNamespace: {{ .Values.storage.namespace | quote }}
        remoteSelector:
          {{ .Values.storage.selector | toYaml | nindent 10 }}
        port: {{ .Values.storage.port }}
        {{- else }}
        remoteGenerated: Anywhere
        {{- end }}
        description: "Toolbox Storage"

      - direction: Egress
        selector:
          app: toolbox
        {{- if .Values.postgres.internal }}
        remoteNamespace: {{ .Values.postgres.namespace | quote }}
        remoteSelector:
          {{ .Values.postgres.selector | toYaml | nindent 10 }}
        port: {{ .Values.postgres.port }}
        {{- else }}
        remoteGenerated: Anywhere
        {{- end }}
        description: "Toolbox Postgres"

      - direction: Egress
        selector:
          app: toolbox
        {{- if .Values.redis.internal }}
        remoteNamespace: {{ .Values.redis.namespace | quote }}
        remoteSelector:
          {{ .Values.redis.selector | toYaml | nindent 10 }}
        port: {{ .Values.redis.port }}
        {{- else }}
        remoteGenerated: Anywhere
        {{- end }}
        description: "Toolbox Redis"

      # Gitlab Netpols
      - direction: Egress
        remoteGenerated: IntraNamespace

      - direction: Egress
        selector:
          app: gitlab
        remoteGenerated: KubeAPI


      # Webservice Netpols
      - direction: Egress
        remoteNamespace: keycloak
        remoteSelector:
          app.kubernetes.io/name: keycloak
        selector:
          app: webservice
        port: 8080
        description: "SSO Internal"

      - direction: Egress
        remoteGenerated: Anywhere
        selector:
          app: webservice
        port: 443
        description: "SSO External"

      - direction: Egress
        selector:
          app: webservice
        {{- if .Values.storage.internal }}
        remoteNamespace: {{ .Values.storage.namespace | quote }}
        remoteSelector:
          {{ .Values.storage.selector | toYaml | nindent 10 }}
        port: {{ .Values.storage.port }}
        {{- else }}
        remoteGenerated: Anywhere
        {{- end }}
        description: "Webservice Storage"

      - direction: Egress
        selector:
          app: webservice
        {{- if .Values.redis.internal }}
        remoteNamespace: {{ .Values.redis.namespace | quote }}
        remoteSelector:
          {{ .Values.redis.selector | toYaml | nindent 10 }}
        port: {{ .Values.redis.port }}
        {{- else }}
        remoteGenerated: Anywhere
        {{- end }}
        description: "Webservice Redis"

      - direction: Egress
        selector:
          app: webservice
        {{- if .Values.postgres.internal }}
        remoteNamespace: {{ .Values.postgres.namespace | quote }}
        remoteSelector:
          {{ .Values.postgres.selector | toYaml | nindent 10 }}
        port: {{ .Values.postgres.port }}
        {{- else }}
        remoteGenerated: Anywhere
        {{- end }}
        description: "Webservice Postgres"


      # Gitlab Pages
      - direction: Ingress
        selector:
          app: gitlab-pages
        port: 8090
        description: GitLab Pages Ingress

      - direction: Egress
        selector:
          app: gitlab-pages
        {{- if .Values.storage.internal }}
        remoteNamespace: {{ .Values.storage.namespace | quote }}
        remoteSelector:
          {{ .Values.storage.selector | toYaml | nindent 10 }}
        port: {{ .Values.storage.port }}
        {{- else }}
        remoteGenerated: Anywhere
        {{- end }}
        description: "Gitlab Pages Storage"

      # Custom rules for unanticipated scenarios
      {{- range .Values.custom }}
      - direction: {{ .direction }}
        selector:
          {{ .selector | toYaml | nindent 10 }}
        {{- if not .remoteGenerated }}
        remoteNamespace: {{ .remoteNamespace }}
        remoteSelector:
          {{ .remoteSelector | toYaml | nindent 10 }}
        port: {{ .port }}
        {{- else }}
        remoteGenerated: {{ .remoteGenerated }}
        {{- end }}
        description: {{ .description }}
      {{- end }}
