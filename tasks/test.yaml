# Copyright 2024 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

variables:
  - name: GITLAB_TOKEN
    default: glpat-NO_DEFAULT_VALUE

tasks:
  - name: all
    actions:
      - task: ingress
      - task: ui
      - task: bot-account

  - name: ingress
    actions:
      # `/-/readiness` endpoint returns 503 if any checks fail.
      # When `?all=1` is specified, dependent services are also checked.
      # https://docs.gitlab.com/ee/administration/monitoring/health_check.html#readiness
      - description: GitLab Readiness Check
        maxRetries: 30
        cmd: |
          STATUS=$(curl -s -o /dev/null --write-out '%{http_code}' 'https://gitlab.uds.dev/-/readiness?all=1')
          echo "GitLab readiness status: ${STATUS}"
          if [ "$STATUS" != "200" ]; then
            sleep 10
            exit 1
          fi

  - name: ui
    description: GitLab UI/Auth Checks
    actions:
      # Setup the project name and SSH Key
      - cmd: echo "uds-package-test-$(date +%s)"
        setVariables:
          - name: PROJECT_NAME
      - cmd: rm -f ./gitlab-test-ssh-key && ssh-keygen -t rsa -b 4096 -C "your_email@example.com" -f ./gitlab-test-ssh-key -P ""
        dir: tests/data
      # Login, and create a project
      - cmd: |
          docker run --rm --ipc=host --net=host -e SSH_PUBLIC_KEY="$(cat ./data/gitlab-test-ssh-key.pub)" -e PROJECT_NAME="${PROJECT_NAME}" --mount type=bind,source="$(pwd)",target=/app mcr.microsoft.com/playwright:v1.51.0-jammy sh -c " \
            cd app && \
            npm ci && \
            npx playwright test \
            "
        dir: tests
      # Pull the project via SSH (gateway -> gitlab-shell -> gitaly)
      - cmd: |
          mkdir -p "${PROJECT_NAME}" && cd "${PROJECT_NAME}" && git init
          git config core.sshCommand "ssh -i ../gitlab-test-ssh-key -o StrictHostKeyChecking=no"
          git remote add origin "ssh://git@gitlab.uds.dev:2223/doug/${PROJECT_NAME}-firefox.git"
          git pull origin main
        dir: tests/data
      # Push to the project via HTTPS (gateway -> gitlab-webservice -> gitaly)
      - task: create-doug-pat
      - cmd: |
          cd "${PROJECT_NAME}" || exit
          git config commit.gpgsign false
          git config user.email "doug@uds.dev"
          git config user.name "Doug Unicorn"
          git remote set-url origin "https://doug:${GITLAB_TOKEN}@gitlab.uds.dev/doug/${PROJECT_NAME}-firefox.git"
          touch hello-kitteh.txt && git add . && git commit -m "Add hello kitteh"
          git push -u origin --all
        dir: tests/data
      # Cleanup the git repo
      - cmd: rm -rf "${PROJECT_NAME}"
        dir: tests/data
      - cmd: |
          echo "${GITLAB_TOKEN}" | docker login registry.uds.dev -u doug --password-stdin
          docker pull nginx:latest
          docker tag nginx:latest "registry.uds.dev/doug/${PROJECT_NAME}-firefox"
          docker push "registry.uds.dev/doug/${PROJECT_NAME}-firefox"

  - name: bot-account
    description: Bot Account Access Tests
    actions:
      - cmd: kubectl get secret gitlab-test-bot -n test-bot -o jsonpath="{.data.TOKEN}" | base64 --decode
        setVariables:
          - name: GITLAB_BOT_TOKEN
      - cmd: |
          response=$(curl --write-out "%{http_code}" --silent --output /dev/null --header "PRIVATE-TOKEN: $GITLAB_BOT_TOKEN" https://gitlab.uds.dev/api/v4/user)

          # Check if the status code is 200 (OK)
          if [ "$response" -eq 200 ]; then
            echo "GitLab API token is valid."
          else
            echo "Error: GitLab API token is invalid or cannot access the API."
            exit 1
          fi

  - name: create-doug-pat
    description: Create personal access token (PAT) for "doug" account
    actions:
      - cmd: |
          ./uds zarf tools kubectl exec -n gitlab deployment/gitlab-toolbox -- gitlab-rails runner -e production '\
          user = User.find_by_username("doug"); \
          token = user.personal_access_tokens.create(scopes: ["api"], name: "doug", expires_at: 365.days.from_now); \
          token.save!; \
          puts token.token; \
          '
        setVariables:
          - name: GITLAB_TOKEN

  - name: root-password
    actions:
      - description: Get the root password for GitLab (useful for local dev)
        cmd: ./uds zarf tools kubectl get secret -n gitlab gitlab-gitlab-initial-root-password -o jsonpath='{.data.password}' | base64 -d

  # TODO (@ewyles) - might be useful in uds-common as a generic thing in the future
  - name: bot-account-script
    actions:
      - description: Manually run the bot account script from the helm template locally
        cmd: |
          helm template charts/settings --show-only templates/bot-accounts-job.yaml | \
          yq -r '.spec.template.spec.containers[0].args[0]' | \
          sed 's|http://gitlab-webservice-default.gitlab.svc.cluster.local:8181|https://gitlab.uds.dev|g' | \
          sh

  - name: debug-bot-account-script
    actions:
      - description: Manually run the bot account script from the helm template locally
        cmd: |
          helm template charts/settings --show-only templates/bot-accounts-job.yaml | \
          yq -r '.spec.template.spec.containers[0].args[0]' | \
          sed 's|http://gitlab-webservice-default.gitlab.svc.cluster.local:8181|https://gitlab.uds.dev|g' | \
          { echo "set -x"; cat; } | \
          sh

  - name: doug-admin
    description: Promote Doug to admin (requires running setup:create-doug-user and logging into gitlab ui first)
    actions:
      - cmd: |
         ./uds zarf tools kubectl exec -n gitlab deployment/gitlab-toolbox -- gitlab-rails runner -e production "user = User.find_by(username: 'doug'); user.admin = true; user.save!"
